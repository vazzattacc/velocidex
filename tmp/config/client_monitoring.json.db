{"version":"1663623704033809100", "artifacts":{"artifacts":["Generic.Client.Stats"], "compiledCollectorArgs":[{"queryId":"1", "totalQueries":"2", "precondition":"SELECT OS From info() where OS = 'windows'", "env":[{"key":"Frequency", "value":"10"}], "Query":[{"VQL":"LET Frequency<=int(int=Frequency)"}, {"VQL":"LET precondition_Generic_Client_Stats_0=SELECT OS FROM info() WHERE OS = 'windows'"}, {"VQL":"LET Generic_Client_Stats_0_0=SELECT *, rate(x=CPU, y=Timestamp) AS CPUPercent FROM foreach(row= { SELECT UnixNano FROM clock(period=Frequency)}, query= { SELECT UnixNano / 1000000000 AS Timestamp, User + System AS CPU, Memory.WorkingSetSize AS RSS FROM pslist(pid=getpid())})"}, {"Name":"$11a36b2892d138af738a5eaefbad99b15e7f556c2c3f72888ea5e4fd0949172f", "VQL":"SELECT * FROM if(then=Generic_Client_Stats_0_0, condition=precondition_Generic_Client_Stats_0, else= { SELECT * FROM scope() WHERE log(message='Query skipped due to precondition') AND FALSE})"}], "maxRow":"1000"}, {"queryId":"2", "totalQueries":"2", "precondition":"SELECT OS From info() where OS != 'windows'", "env":[{"key":"Frequency", "value":"10"}], "Query":[{"VQL":"LET Frequency<=int(int=Frequency)"}, {"VQL":"LET precondition_Generic_Client_Stats_0=SELECT OS FROM info() WHERE OS != 'windows'"}, {"VQL":"LET Generic_Client_Stats_0_0=SELECT *, rate(x=CPU, y=Timestamp) AS CPUPercent FROM foreach(row= { SELECT UnixNano FROM clock(period=Frequency)}, query= { SELECT UnixNano / 1000000000 AS Timestamp, Times.system + Times.user AS CPU, MemoryInfo.RSS AS RSS FROM pslist(pid=getpid())})"}, {"Name":"$11a36b2892d138af738a5eaefbad99b15e7f556c2c3f72888ea5e4fd0949172f", "VQL":"SELECT * FROM if(then=Generic_Client_Stats_0_0, condition=precondition_Generic_Client_Stats_0, else= { SELECT * FROM scope() WHERE log(message='Query skipped due to precondition') AND FALSE})"}], "maxRow":"1000"}]}, "labelEvents":[{"label":"Quarantine", "artifacts":{"artifacts":["Windows.Remediation.QuarantineMonitor"], "compiledCollectorArgs":[{"queryId":"1", "totalQueries":"1", "precondition":"\nSELECT OS FROM info() WHERE OS = \"windows\"\n   AND version(function=\"atexit\") >= 0\n", "env":[{"key":"PolicyName", "value":"VelociraptorQuarantine"}, {"key":"RuleLookupTable", "value":"Action,SrcAddr,SrcMask,SrcPort,DstAddr,DstMask,DstPort,Protocol,Mirrored,Description\nPermit,me,,0,any,,53,udp,yes,DNS\nPermit,me,,0,any,,53,tcp,yes,DNS TCP\nPermit,me,,68,any,,67,udp,yes,DHCP\nBlock,any,,,any,,,,yes,All other traffic\n"}, {"key":"MessageBox"}, {"key":"ReloadPeriod", "value":"600"}], "Query":[{"VQL":"LET RuleLookupTable<=SELECT * FROM if(condition=format(format=\"%T\", args=RuleLookupTable) =~ \"string\", then= { SELECT * FROM parse_csv(filename=RuleLookupTable, accessor='data')}, else=RuleLookupTable)"}, {"VQL":"LET ReloadPeriod<=int(int=ReloadPeriod)"}, {"VQL":"LET precondition_Windows_Remediation_QuarantineMonitor_0=SELECT OS FROM info() WHERE OS = \"windows\" AND version(function=\"atexit\") >= 0"}, {"VQL":"LET _<=atexit(query= { SELECT * FROM Artifact.Windows.Remediation.Quarantine(PolicyName=PolicyName, RemovePolicy=TRUE)})"}, {"VQL":"LET Windows_Remediation_QuarantineMonitor_0_1=SELECT * FROM foreach(row= { SELECT * FROM clock(period=ReloadPeriod, start=now()) WHERE log(message=\"Setting quarantine policy\")}, query= { SELECT * FROM Artifact.Windows.Remediation.Quarantine(PolicyName=PolicyName, RuleLookupTable=RuleLookupTable, MessageBox=MessageBox)})"}, {"Name":"$183737216c9d3e5e8ec01f0ca5202f68117fc78fcc20e3c2cb68375d46d6cee5cf2bc06e3be2bf80e34b8fb61cab058e", "VQL":"SELECT * FROM if(then=Windows_Remediation_QuarantineMonitor_0_1, condition=precondition_Windows_Remediation_QuarantineMonitor_0, else= { SELECT * FROM scope() WHERE log(message='Query skipped due to precondition') AND FALSE})"}], "maxRow":"1000", "artifacts":[{"name":"Windows.Remediation.Quarantine", "precondition":"SELECT OS FROM info() WHERE OS = 'windows'", "parameters":[{"name":"PolicyName", "default":"VelociraptorQuarantine"}, {"name":"RuleLookupTable", "default":"Action,SrcAddr,SrcMask,SrcPort,DstAddr,DstMask,DstPort,Protocol,Mirrored,Description\nPermit,me,,0,any,,53,udp,yes,DNS\nPermit,me,,0,any,,53,tcp,yes,DNS TCP\nPermit,me,,68,any,,67,udp,yes,DHCP\nBlock,any,,,any,,,,yes,All other traffic\n", "type":"csv"}, {"name":"MessageBox"}, {"name":"RemovePolicy", "type":"bool"}], "type":"client", "sources":[{"queries":["LET MessageBox<=parse_string_with_regex(regex='^(?P<Message>.{0,255}).*', string=MessageBox).Message", "LET normalise_action(Action)=if(condition=lowcase(string=Action) = 'permit', then='Permit', else=if(condition=lowcase(string=Action) = 'block', then='Block'))", "LET configurable_policy<=SELECT normalise_action(Action=Action) AS Action, SrcAddr, SrcMask, SrcPort, DstAddr, DstMask, DstPort, Protocol, Mirrored, Description FROM RuleLookupTable", "LET get_domain(URL)=parse_string_with_regex(string=URL, regex='^https?://(?P<Domain>[^:/]+)').Domain", "LET get_port(URL)=if(condition=URL =~ \"https://[^:]+/\", then=\"443\", else=if(condition=URL =~ \"http://[^:]+/\", then=\"80\", else=parse_string_with_regex(string=URL, regex='^https?://[^:/]+(:(?P<Port>[0-9]*))?/').Port))", "LET extracted_config<=SELECT * FROM foreach(row=config.server_urls, query= { SELECT 'Permit' AS Action, 'me' AS SrcAddr, '' AS SrcMask, '0' AS SrcPort, get_domain(URL=_value) AS DstAddr, '' AS DstMask, get_port(URL=_value) AS DstPort, 'tcp' AS Protocol, 'yes' AS Mirrored, 'VelociraptorFrontEnd' AS Description, _value AS URL FROM scope()})", "LET policy<=SELECT * FROM chain(a=extracted_config, b=configurable_policy) WHERE Action =~ '^(Permit|Block)$'", "LET clean_cmdline(CMD)=filter(list=CMD, regex='^(\\\\w+|\\\\w+=.+)$')", "LET delete_cmdline=clean_cmdline(CMD=('netsh', 'ipsec', 'static', 'delete', 'policy', 'name=' + PolicyName))", "LET create_cmdline=clean_cmdline(CMD=('netsh', 'ipsec', 'static', 'add', 'policy', 'name=' + PolicyName))", "LET action_cmdline(Action)=clean_cmdline(CMD=('netsh', 'ipsec', 'static', 'add', 'filteraction', 'name=' + PolicyName + ' ' + Action + 'Action', 'action=' + Action))", "LET rule_cmdline(Action)=clean_cmdline(CMD=('netsh', 'ipsec', 'static', 'add', 'rule', 'name=' + PolicyName + ' ' + Action + 'Rule', 'policy=' + PolicyName, 'filterlist=' + PolicyName + ' ' + Action + 'FilterList', 'filteraction=' + PolicyName + ' ' + Action + 'Action'))", "LET enable_cmdline=clean_cmdline(CMD=('netsh', 'ipsec', 'static', 'set', 'policy', 'name=' + PolicyName, 'assign=y'))", "LET combine_results(Stdout,Stderr,ReturnCode,Message)=if(condition=Stdout =~ \"[^\\\\s]\", then=Stdout, else=if(condition=Stderr =~ \"[^\\\\s]\", then=Stderr, else=if(condition=ReturnCode = 0, then=Message)))", "LET delete_policy=SELECT timestamp(epoch=now()) AS Time, PolicyName + ' IPSec policy removed.' AS Result FROM execve(argv=delete_cmdline, length=10000)", "LET create_policy=SELECT timestamp(epoch=now()) AS Time, combine_results(Stdout=Stdout, Stderr=Stderr, ReturnCode=ReturnCode, Message=PolicyName + ' IPSec policy created.') AS Result FROM execve(argv=create_cmdline, length=10000)", "LET entry_cmdline(Action,SrcAddr,SrcPort,SrcMask,DstAddr,DstPort,DstMask,Protocol,Mirrored,Description)=clean_cmdline(CMD=('netsh', 'ipsec', 'static', 'add', 'filter', format(format='filterlist=%s %sFilterList', args= [PolicyName, Action]), format(format='srcaddr=%v', args=SrcAddr), format(format='srcmask=%v', args=SrcMask), format(format='srcport=%v', args=SrcPort), format(format='dstaddr=%v', args=DstAddr), format(format='dstmask=%v', args=DstMask), format(format='dstport=%v', args=DstPort), format(format='protocol=%v', args=Protocol), format(format='mirrored=%v', args=Mirrored), format(format='description=%v', args=Description)))", "LET create_filters=SELECT * FROM foreach(row=policy, query= { SELECT timestamp(epoch=now()) AS Time, combine_results(Stdout=Stdout, Stderr=Stderr, ReturnCode=ReturnCode, Message='Entry added: ' + join(array=entry_cmdline(Action=Action, SrcAddr=SrcAddr, SrcPort=SrcPort, SrcMask=SrcMask, DstAddr=DstAddr, DstPort=DstPort, DstMask=DstMask, Protocol=Protocol, Mirrored=Mirrored, Description=Description), sep=\" \")) AS Result FROM execve(argv=entry_cmdline(Action=Action, SrcAddr=SrcAddr, SrcPort=SrcPort, SrcMask=SrcMask, DstAddr=DstAddr, DstPort=DstPort, DstMask=DstMask, Protocol=Protocol, Mirrored=Mirrored, Description=Description), length=10000)})", "LET create_actions=SELECT * FROM foreach(row= { SELECT Action FROM policy GROUP BY Action}, query= { SELECT timestamp(epoch=now()) AS Time, combine_results(Stdout=Stdout, Stderr=Stderr, ReturnCode=ReturnCode, Message='FilterAction added: ' + join(array=action_cmdline(Action=Action), sep=\" \")) AS Result FROM execve(argv=action_cmdline(Action=Action), length=10000)})", "LET create_rules=SELECT * FROM foreach(row= { SELECT Action FROM policy GROUP BY Action}, query= { SELECT timestamp(epoch=now()) AS Time, combine_results(Stdout=Stdout, Stderr=Stderr, ReturnCode=ReturnCode, Message='Rule added: ' + join(array=rule_cmdline(Action=Action), sep=\" \")) AS Result FROM execve(argv=rule_cmdline(Action=Action), length=10000)})", "LET enable_policy=SELECT timestamp(epoch=now()) AS Time, combine_results(Stdout=Stdout, Stderr=Stderr, ReturnCode=ReturnCode, Message=PolicyName + ' IPSec policy applied.') AS Result FROM execve(argv=enable_cmdline, length=10000)", "LET test_connection=SELECT * FROM foreach(row= { SELECT * FROM policy WHERE Description = 'VelociraptorFrontEnd'}, query= { SELECT *, Url, response FROM http_client(url='https://' + DstAddr + ':' + DstPort + '/server.pem', disable_ssl_security='TRUE') WHERE Response = 200 LIMIT 1 })", "LET final_check=SELECT * FROM if(condition=test_connection, then= { SELECT timestamp(epoch=now()) AS Time, if(condition=MessageBox, then=PolicyName + ' connection test successful. MessageBox sent.', else=PolicyName + ' connection test successful.') AS Result FROM if(condition=MessageBox, then= { SELECT * FROM execve(argv= ['msg', '*', MessageBox])}, else= { SELECT * FROM scope()})}, else= { SELECT timestamp(epoch=now()) AS Time, PolicyName + ' failed connection test. Removing IPSec policy.' AS Result FROM delete_policy})", "SELECT * FROM if(condition=RemovePolicy, then=delete_policy, else= { SELECT * FROM chain(a=delete_policy, b=create_policy, c=create_filters, d=create_actions, e=create_rules, g=enable_policy, h=final_check)})"]}]}]}]}}]}